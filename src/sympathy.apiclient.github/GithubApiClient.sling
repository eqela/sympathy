
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.json
import jk.env
import sympathy.apiclient.common

class is RestApiClient:

model GithubUserDetails
{
	id as string
	name as string
	login as string
	avatar_url as string
}

model GithubRepositoryDetails
{
	name as string
	full_name as string
	html_url as string
	description as string
	url as string
	forks_url as string
	downloads_url as string
	git_url as string
	ssh_url as string
	clone_url as string
}

func forAccessToken(ctx as LoggingContext, accessToken as string) static as this
{
	var v = new this(ctx)
	v.accessToken = accessToken
	return v
}

prop accessToken as string

func getUserDetails async as GithubUserDetails
{
	var hrs = new KeyValueList<string,string>()
	hrs.add("User-Agent", "jkop")
	hrs.add("Authorization", "Bearer " .. accessToken)
	var response = await request("GET", "https://api.github.com/user", hrs, null)
	var res = response.getBodyAsDynamicMap()
	return GithubUserDetails.forData(res)
}

func getUserEmailAddress async as string
{
	var hrs = new KeyValueList<string,string>()
	hrs.add("User-Agent", "jkop")
	hrs.add("Authorization", "Bearer " .. accessToken)
	var response = await request("GET", "https://api.github.com/user/emails", hrs, null)
	var body = response.getBodyAsBuffer()
	var res = assert JSONParser.parseBuffer(body) as DynamicVector:
		Error.throw("httpResponseIsNotJsonArray", "HTTP response is not a JSON array")
	var emailAddress as string
	foreach data as DynamicMap in res.toVector() {
		var primary = data.getBoolean("primary")
		if primary {
			emailAddress = data.getString("email")
			break
		}
	}
	return emailAddress
}

func getUserRepositories async as vector<GithubRepositoryDetails>
{
	var hrs = new KeyValueList<string,string>()
	hrs.add("User-Agent", "jkop")
	hrs.add("Authorization", "Bearer " .. accessToken)
	var response = await request("GET", "https://api.github.com/user/repos", hrs, null)
	var body = response.getBodyAsBuffer()
	var res = assert JSONParser.parseBuffer(body) as DynamicVector:
		Error.throw("httpResponseIsNotJsonArray", "HTTP response is not a JSON array")
	var v = new vector<GithubRepositoryDetails>
	foreach data as DynamicMap in res.toVector() {
		var repo = GithubRepositoryDetails.forData(data)
		v += repo
	}
	return v
}
