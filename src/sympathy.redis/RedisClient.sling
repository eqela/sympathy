
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.nodejs

class:

depend "npm:@redis/client:1.5.5"

prop ctx as LoggingContext

var redisClient as dynamic

ctor:
	nop

ctor(redisAddress as string):
	connect(redisAddress)

func connect(redisAddress as string) async
{
	await disconnect()
	var api = NodeModule.require("@redis/client")
	redisClient = api.createClient({
		url redisAddress
		socket {
			reconnectStrategy func as dynamic {
				return 1000
			}
		}
	})
	redisClient.on("error", func {
		redisClient = null
	})
	await redisClient.connect()
}

func disconnect async
{
	if redisClient {
		await redisClient.disconnect()
		redisClient = null
	}
}

func set(key as string, value as string, options as map) async
{
	assert redisClient
	if ctx && ctx.isInDebugMode():
		Log.debug(ctx, "Redis SET `" .. key .. "' = `" .. value .. "'")
	redisClient.set(key, value, lang "js" dynamic {{{ Object.fromEntries(options) }}})
}

func get(key as string) async as string
{
	assert redisClient
	var value = String.asString(await redisClient.get(key))
	if ctx && ctx.isInDebugMode():
		Log.debug(ctx, "Redis GET `" .. key .. "' = `" .. value .. "'")
	return value
}
