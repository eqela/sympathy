
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.time
import jk.json
import jk.data.sql
import sympathy.db
import sympathy.util

class is ApplicationDatabase:

const TABLE_TRANSACTION = "transaction"
const TABLE_TRANSACTION_PRODUCT = "transaction_product"
const TABLE_SUBSCRIPTION_SERVICE = "subscription_service"
const TABLE_SUBSCRIPTION_PACKAGE = "subscription_package"
const TRANSACTION_STATE_NEW = 0
const TRANSACTION_STATE_PAID = 1
const TRANSACTION_STATE_CANCELLED = 2

model Transaction
{
	id as string #key
	state as int
	timeCreated as int
	timePaid as int
	timeCancelled as int
	customerType as string
	customerId as string
	customerName as string
	customerAddress as string
	paymentType as string
	paymentId as string
}

model TransactionProduct
{
	id as string #key
	transactionId as string
	productId as string
	productName as string
	currency as string
	quantity as int
	unitPrice as int
	taxAmount as int
	totalPrice as int
}

model SubscriptionService
{
	id as string #key
	name as string
}

model SubscriptionPackage
{
	id as string #key
	serviceId as string
	productId as string
	metadata as DynamicMap
}

func getTableDefinitions(tables as vector<SQLTableInfo>) override
{
	tables += SQLTableInfo.forDynamicModel(TABLE_TRANSACTION, new Transaction())
	tables += SQLTableInfo.forDynamicModel(TABLE_TRANSACTION_PRODUCT, new TransactionProduct())
	tables += SQLTableInfo.forDynamicModel(TABLE_SUBSCRIPTION_SERVICE, new SubscriptionService())
	tables += SQLTableInfo.forDynamicModel(TABLE_SUBSCRIPTION_PACKAGE, new SubscriptionPackage())
}

func addTransaction(transaction as Transaction) async as Transaction
{
	assert transaction
	var transactionId = UniqueHash.generate()
	transaction.timeCreated = SystemClock.asUTCSeconds() as int
	transaction.id = transactionId
	if transaction.state == TRANSACTION_STATE_PAID:
		transaction.timePaid = SystemClock.asUTCSeconds() as int
	else if transaction.state == TRANSACTION_STATE_CANCELLED:
		transaction.timeCancelled = SystemClock.asUTCSeconds() as int
	assert await db.executeStatement(await db.prepareInsertStatement(TABLE_TRANSACTION, transaction.toDynamicMap()))
	return transaction
}

func addTransactionProduct(product as TransactionProduct) async as TransactionProduct
{
	assert product
	product.id = UniqueHash.generate()
	assert await db.executeStatement(await db.prepareInsertStatement(TABLE_TRANSACTION_PRODUCT, product.toDynamicMap()))
	return product
}

func updateTransactionStateByCustomerId(customerId as string, state as int) async as Transaction
{
	var criteria = new DynamicMap()
	criteria.setString("customerId", customerId)
	criteria.setInteger("state", TRANSACTION_STATE_NEW)
	var transaction = new Transaction()
	transaction.state = state
	if state == TRANSACTION_STATE_PAID:
		transaction.timePaid = SystemClock.asUTCSeconds() as int
	else if state == TRANSACTION_STATE_CANCELLED:
		transaction.timeCancelled = SystemClock.asUTCSeconds() as int
	assert await db.executeStatement(await db.prepareUpdateStatement(TABLE_TRANSACTION, criteria, transaction.toDynamicMap()))
	return transaction
}

func updateTransactionStateById(id as string, state as int) async as Transaction
{
	var criteria = new DynamicMap()
	criteria.setString("id", id)
	var transaction = new Transaction()
	transaction.state = state
	if state == TRANSACTION_STATE_PAID:
		transaction.timePaid = SystemClock.asUTCSeconds() as int
	else if state == TRANSACTION_STATE_CANCELLED:
		transaction.timeCancelled = SystemClock.asUTCSeconds() as int
	assert await db.executeStatement(await db.prepareUpdateStatement(TABLE_TRANSACTION, criteria, transaction.toDynamicMap()))
	return transaction
}

func getTransactionRecord(id as string) async as Transaction
{
	var criteria = new DynamicMap()
	criteria.setString("id", id)
	var v = assert await db.executeSingleRowQueryStatement(await db.prepareSelectWithCriteriaStatement(TABLE_TRANSACTION, criteria))
	var transaction = assert Transaction.forData(v)
	return transaction
}

func getTransactionProducts(transactionId as string) async as TransactionProduct[]
{
	var criteria = new DynamicMap()
	criteria.setString("transactionId", transactionId)
	var v = assert await db.executeQueryStatement(await db.prepareSelectWithCriteriaStatement(TABLE_TRANSACTION_PRODUCT, criteria))
	var vm = v.toVectorOfMaps()
	var result = new vector<TransactionProduct>
	foreach product in vm.toVectorOfDynamicMaps():
		result += TransactionProduct.forData(product)
	return result
}

func addSubscriptionService(service as SubscriptionService) async as SubscriptionService
{
	assert service
	assert await db.executeStatement(await db.prepareInsertStatement(TABLE_SUBSCRIPTION_SERVICE, service.toDynamicMap()))
	return service
}

func getSubscriptionServices async as SubscriptionService[]
{
	var resp = assert await db.executeQueryStatement(await db.prepareSelectAllStatement(TABLE_SUBSCRIPTION_SERVICE))
	var vm = resp.toVectorOfMaps()
	var results = new vector<SubscriptionService>
	foreach v in vm.toVectorOfDynamicMaps():
		results += SubscriptionService.forData(v)
	return results
}

func updateSubscriptionService(serviceId as string, service as SubscriptionService) async as SubscriptionService
{
	assert service
	var criteria = new DynamicMap()
	criteria.setString("id", serviceId)
	service.id = null
	service.removeNullValues()
	assert await db.executeStatement(await db.prepareUpdateStatement(TABLE_SUBSCRIPTION_SERVICE, criteria, service.toDynamicMap()))
	service.id = serviceId
	return service
}

func deleteSubscriptionService(serviceId as string) async as bool
{
	var criteria = new DynamicMap()
	criteria.setString("id", serviceId)
	return await db.executeStatement(await db.prepareDeleteStatement(TABLE_SUBSCRIPTION_SERVICE, criteria))
}

func addSubscriptionPackage(package as SubscriptionPackage) async as SubscriptionPackage
{
	assert package
	package.id = UniqueHash.generate()
	assert await db.executeStatement(await db.prepareInsertStatement(TABLE_SUBSCRIPTION_PACKAGE, package.toFlatDynamicMap()))
	return package
}

func getSubscriptionPackagesByProductId(productId as string) async as SubscriptionPackage[]
{
	var criteria = new DynamicMap()
	criteria.setString("productId", productId)
	var v = assert await db.executeQueryStatement(await db.prepareSelectWithCriteriaStatement(TABLE_SUBSCRIPTION_PACKAGE, criteria))
	var vm = v.toVectorOfMaps()
	var result = new vector<SubscriptionPackage>
	foreach sub in vm.toVectorOfDynamicMaps():
		result += SubscriptionPackage.forData(sub)
	return result
}

func getSubscriptionPackageByProductIdAndServiceId(productId as string, serviceId as string) async as SubscriptionPackage
{
	var criteria = new DynamicMap()
	criteria.setString("productId", productId)
	criteria.setString("serviceId", serviceId)
	var v = assert await db.executeSingleRowQueryStatement(await db.prepareSelectWithCriteriaStatement(TABLE_SUBSCRIPTION_PACKAGE, criteria))
	return SubscriptionPackage.forData(v)
}

func updateSubscriptionPackage(subscriptionPackageId as string, package as SubscriptionPackage) async as SubscriptionPackage
{
	assert package
	var criteria = new DynamicMap()
	criteria.setString("id", subscriptionPackageId)
	package.id = null
	package.removeNullValues()
	assert await db.executeStatement(await db.prepareUpdateStatement(TABLE_SUBSCRIPTION_PACKAGE, criteria, package.toFlatDynamicMap()))
	package.id = subscriptionPackageId
	return package
}

func deleteSubscriptionPackage(subscriptionPackageId as string) async as bool
{
	var criteria = new DynamicMap()
	criteria.setString("id", subscriptionPackageId)
	return await db.executeStatement(await db.prepareDeleteStatement(TABLE_SUBSCRIPTION_PACKAGE, criteria))
}
