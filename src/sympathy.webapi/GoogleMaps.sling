
/*
 * This file is part of Sympathy
 * Copyright (c) 2017 Job and Esther Technologies, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class imports cape imports sympathy:

class GoogleMapsHTTPClientListener is HTTPClientListener
{
	prop listener as function<void,DynamicMap,Error>
	var body as buffer

	func onError(message as string) override
	{
		if(listener != null) {
			listener(null, Error.forMessage(message))
		}
	}

	func onDataReceived(buffer as buffer) override as bool
	{
		body = buffer
		return(true)
	}

	func onResponseCompleted override
	{
		base.onResponseCompleted()
		if(listener != null) {
			var json = JSONParser.parse(DataValidator.toValidJSONString(String.forUTF8Buffer(body))) as DynamicMap
			if(json == null) {
				listener(null, Error.forCode("invalidResponse"))
				return
			}
			if(String.equals("INVALID_REQUEST", json.getString("status"))) {
				listener(null, Error.forCode("invalidRequest"))
				return
			}
			listener(json, null)
		}
	}
}

func getTravelDetails(apiKey as string, origin as string, destination as string, listener as function<void,DynamicMap,Error>) static
{
	if(String.isEmpty(apiKey)) {
		if(listener != null) {
			listener(null, Error.forCode("apiKeyMissing"))
		}
		return
	}
	var op = new HTTPClientOperation()
	op.setAcceptInvalidCertificate(true)
	var req as HTTPClientRequest
	req = HTTPClientRequest.forGET("https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=" ..
		cape.URLEncoder.encode(origin) .. "&destinations=" .. cape.URLEncoder.encode(destination) .. "&key=" .. apiKey)
	op.executeRequest(req, new GoogleMapsHTTPClientListener().setListener(listener))
}
