
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs
import jk.mime
import jk.base64

class is SMTPMessage:

ctor
{
	setContentType("multipart/mixed")
}

pvar attachments as DynamicVector
var message as string

func getMessageBody override as string
{
	if attachments == null || attachments.getSize() < 1:
		return null
	if String.isEmpty(message) == false:
		return message
	var subject = getSubject()
	var date = getDate()
	var myName = getMyName()
	var myAddress = getMyAddress()
	var text = getText()
	var recipientsTo = getRcptsTo()
	var recipientsCC = getRcptsCC()
	var messageID = getMessageID()
	var replyTo = getReplyTo()
	var sb = new StringBuilder()
	sb.appendString("From: ")
	sb.appendString(myName)
	sb.appendString(" <")
	sb.appendString(myAddress)
	if String.isEmpty(replyTo) == false {
		sb.appendString(">\r\nReply-To: ")
		sb.appendString(myName)
		sb.appendString(" <")
		sb.appendString(replyTo)
	}
	sb.appendString(">\r\nTo: ")
	var first = true
	if recipientsTo {
		foreach to as string in recipientsTo.toVector() {
			if first == false:
				sb.appendString(", ")
			sb.appendString(to)
			first = false
		}
	}
	sb.appendString("\r\nCc: ")
	first = true
	if recipientsCC {
		foreach to as string in recipientsCC.toVector() {
			if first == false:
				sb.appendString(", ")
			sb.appendString(to)
			first = false
		}
	}
	// FIXME - How about the BCC?
	sb.appendString("\r\nSubject: ")
	sb.appendString(subject)
	sb.appendString("\r\nMIME-Version: 1.0")
	sb.appendString("\r\nContent-Type: ")
	sb.appendString("multipart/mixed")
	sb.appendString("; boundary=\"XXXXboundarytext\"")
	sb.appendString("\r\nDate: ")
	sb.appendString(date)
	sb.appendString("\r\nMessage-ID: <")
	sb.appendString(messageID)
	sb.appendString(">\r\n\r\n")
	sb.appendString("This is a multipart message in MIME format.")
	sb.appendString("\r\n")
	sb.appendString("\r\n--XXXXboundarytext")
	sb.appendString("\r\nContent-Type: text/plain")
	sb.appendString("\r\n")
	sb.appendString("\r\n")
	sb.appendString(text)
	foreach file as File in attachments.toVector() {
		sb.appendString("\r\n--XXXXboundarytext")
		sb.appendString("\r\nContent-Type: ")
		var contentType = MimeTypeRegistry.getSharedInstance().getTypeForFile(file)
		if String.isEmpty(contentType) == false && String.getIndexOfString(contentType, "text") == 0 {
			sb.appendString(contentType)
			sb.appendString("\r\nContent-Disposition: attachment; filename=")
			sb.appendString(file.getBasename())
			sb.appendString("\r\n")
			sb.appendString("\r\n")
			sb.appendString(file.getContentsUTF8())
		}
		else {
			sb.appendString(contentType)
			sb.appendString("\r\nContent-Transfer-Encoding: Base64")
			sb.appendString("\r\nContent-Disposition: attachment filename=")
			sb.appendString(file.getBasename())
			sb.appendString("\r\n")
			sb.appendString("\r\n")
			sb.appendString(Base64Encoder.encode(file.getContentsBuffer()))
		}
	}
	sb.appendString("\r\n")
	sb.appendString("\r\n--XXXXboundarytext--")
	return message = sb.toString()
}
