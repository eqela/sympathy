
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.url
import jk.thread

class:

func forCommonDetails(serverAddress as string, serverUsername as string, serverPassword as string, senderName as string, senderAddress as string) static as this
{
	var config = new DynamicMap()
	config.setString("server_type", "smtp+ssl")
	config.setString("server_username", serverUsername)
	config.setString("server_password", serverPassword)
	config.setString("server_address", serverAddress)
	config.setString("sender_name", senderName)
	config.setString("sender_address", senderAddress)
	return forConfiguration(config)
}

func forRemoteServerUrl(url as string) static as this
{
	var v = new this()
	v.setServer(url)
	return v
}

func forServerAddress(name as string, ctx as LoggingContext) static as this:
	return new this().setThisServerAddress(name).setCtx(ctx)

func forConfiguration(config as DynamicMap, ctx as LoggingContext = null) static as this:
	return new this().setCtx(ctx).configure(config)

pvar thisServerAddress as string
pvar server as string
pvar myName as string
pvar myAddress as string
pvar ctx as LoggingContext
pvar maxSenderCount = 0
pvar acceptInvalidCertificate = false
var serverInternal as string
var senderCount = 0

ctor:
	thisServerAddress = "smtpclient.jkop"

func getDescription as string
{
	var sb = new StringBuilder()
	if String.isEmpty(myName) == false {
		sb.appendCharacter('"')
		sb.appendString(myName)
		sb.appendCharacter('"')
	}
	if String.isEmpty(myAddress) == false {
		var hasName = false
		if sb.count() > 0:
			hasName = true
		if hasName {
			sb.appendCharacter(' ')
			sb.appendCharacter('<')
		}
		sb.appendString(myAddress)
		if hasName:
			sb.appendCharacter('>')
	}
	var s = serverInternal
	if String.isEmpty(s):
		s = server
	if String.isEmpty(s) == false {
		sb.appendCharacter(' ')
		sb.appendCharacter('(')
		sb.appendString(s)
		sb.appendCharacter(')')
	}
	if sb.count() < 1:
		sb.appendString("(no configuration; raw passhtrough of messages)")
	return sb.toString()
}

func configure(config as DynamicMap) as this
{
	if config == null:
		return this
	var defaultPort = "25"
	var scheme = config.getString("server_type", "smtp")
	if String.equals("smtp+ssl", scheme):
		defaultPort = "465"
	var url = new URL()
		.setScheme(scheme)
		.setUsername(config.getString("server_username"))
		.setPassword(config.getString("server_password"))
		.setHost(config.getString("server_address"))
		.setPort(config.getString("server_port", defaultPort))
	setServer(url.toString())
	url.setPassword(null)
	serverInternal = url.toString()
	setMyName(config.getString("sender_name", "SMTP"))
	setMyAddress(config.getString("sender_address", "my@address.com"))
	setThisServerAddress(config.getString("this_server_address", thisServerAddress))
	setAcceptInvalidCertificate(config.getBoolean("accept_invalid_certificate", acceptInvalidCertificate))
	return this
}

func onSendStart
{
	senderCount ++
	Log.debug(ctx, "SMTP send start: Now " .. String.forInteger(senderCount) .. " sender(s)")
}

func onSendEnd
{
	senderCount --
	Log.debug(ctx, "SMTP send end: Now " .. String.forInteger(senderCount) .. " sender(s)")
}

func send(msg as SMTPMessage, listener as SMTPSenderListener = null)
{
	if msg == null {
		if listener:
			listener.onSMTPSendComplete(msg, SMTPClientResult.forError("No message to send"))
		return
	}
	var rcpts = msg.getAllRcpts()
	if rcpts == null || rcpts.getSize() < 1 {
		if listener:
			listener.onSMTPSendComplete(msg, SMTPClientResult.forSuccess())
		return
	}
	if maxSenderCount > 0 && senderCount > maxSenderCount {
		Log.warning(ctx, "Reached maximum sender count " .. String.forInteger(maxSenderCount))
		if listener:
			listener.onSMTPSendComplete(msg, SMTPClientResult.forError("Maximum number of SMTP senders has been exceeded."))
		return
	}
	if String.isEmpty(myName) == false:
		msg.setMyName(myName)
	if String.isEmpty(myAddress) == false:
		msg.setMyAddress(myAddress)
	var sct = new SMTPClientTask()
	if String.isEmpty(server) == false:
		sct.setServer(URL.forString(server))
	sct.setCtx(ctx)
	sct.setServerAddress(thisServerAddress)
	sct.setMsg(msg)
	sct.setListener(listener)
	sct.setSender(this)
	sct.setAcceptInvalidCertificate(acceptInvalidCertificate)
	if Thread.start(sct) == null {
		Log.error(ctx, "Failed to start SMTP sender background task")
		if listener:
			listener.onSMTPSendComplete(msg, SMTPClientResult.forError("Failed to start SMTP sender background task"))
		return
	}
	onSendStart()
}

func sendSync(msg as SMTPMessage) as SMTPClientResult
{
	if not msg:
		return SMTPClientResult.forError("No message was given to SMTPClientTask", msg)
	if maxSenderCount > 0 && senderCount > maxSenderCount {
		Log.warning(ctx, "Reached maximum sender count " .. String.forInteger(maxSenderCount))
		return SMTPClientResult.forError("Maximum number of SMTP senders has been exceeded.")
	}
	if String.isNotEmpty(myName):
		msg.setMyName(myName)
	if String.isNotEmpty(myAddress):
		msg.setMyAddress(myAddress)
	var sct = new SMTPClientTask()
	if String.isEmpty(server) == false:
		sct.setServer(URL.forString(server))
	onSendStart()
	var r = SMTPClient.sendMessage(msg, URL.forString(server), thisServerAddress, ctx, acceptInvalidCertificate)
	if not r:
		r = SMTPClientResult.forError("Unknown error", msg)
	onSendEnd()
	return r
}
