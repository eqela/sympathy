
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.json
import sympathy.geo
import sympathy.config
import sympathy.webserver
import sympathy.apiclient.google

class is WebServerRpcRouter:

prop geoAddressProcessor as GeoAddressProcessor
prop geoDistanceProcessor as GeoDistanceProcessor
prop geoRoadProcessor as GeoRoadProcessor

ctor:
	addFunctions()

func addFunctions
{
	addFunction("getAddressForCoordinates", func(params as DynamicMap) async as dynamic {
		if not geoAddressProcessor:
			Error.throw("noGeoAddressProcessor", null)
		return geoAddressProcessor.getAddressForCoordinates(params.getDouble("latitude"), params.getDouble("longitude"))
	})
	addFunction("getCoordinatesForAddress", func(params as DynamicMap) async as dynamic {
		if not geoAddressProcessor:
			Error.throw("noGeoAddressProcessor", null)
		return geoAddressProcessor.getCoordinatesForAddress(params.getString("address"))
	})
	addFunction("getTravelDuration", func(params as DynamicMap) async as dynamic {
		if not geoDistanceProcessor:
			Error.throw("noGeoDistanceProcessor", null)
		var origin = GeoAddress.forData(params.getDynamicMap("origin"))
		var destination = GeoAddress.forData(params.getDynamicMap("destination"))
		return geoDistanceProcessor.getTravelDuration(origin, destination)
	})
	addFunction("getTravelDistance", func(params as DynamicMap) async as dynamic {
		if not geoDistanceProcessor:
			Error.throw("noGeoDistanceProcessor", null)
		var origin = GeoAddress.forData(params.getDynamicMap("origin"))
		var destination = GeoAddress.forData(params.getDynamicMap("destination"))
		return geoDistanceProcessor.getTravelDistance(origin, destination)
	})
	addFunction("getDirectDistance", func(params as DynamicMap) async as dynamic {
		if not geoDistanceProcessor:
			Error.throw("noGeoDistanceProcessor", null)
		var origin = GeoAddress.forData(params.getDynamicMap("origin"))
		var destination = GeoAddress.forData(params.getDynamicMap("destination"))
		return geoDistanceProcessor.getDirectDistance(origin, destination)
	})
	addFunction("getNearestRoadCoordinates", func(params as DynamicMap) async as dynamic {
		if not geoRoadProcessor:
			Error.throw("noGeoRoadProcessor", null)
		var address = GeoAddress.forData(params.getDynamicMap("address"))
		return geoRoadProcessor.getNearestRoadCoordinates(address)
	})
	addFunction("getRoadPathForCoordinates", func(params as DynamicMap) async as dynamic {
		if not geoRoadProcessor:
			Error.throw("noGeoRoadProcessor", null)
		var coordinates = new vector<GeoCoordinates>
		var dvec = params.getDynamicVector("coordinates")
		foreach cdata as DynamicMap in dvec.toVector():
			coordinates += GeoCoordinates.forData(cdata)
		return geoRoadProcessor.getRoadPathForCoordinates(coordinates)
	})
}

/*
GET "/countries"
{
}

GET "/countries/:isocode/cities"
{
}

GET "/countries/:isocode/postal-code"
{
}
*/

main
{
	return await WebServerMain.execute(args, func(server as WebServer) async {
		var googleMapsApiKey = ServerConfig.require("GOOGLE_MAP_API_KEY")
		var client = GoogleMapsClient.forApiKey(server.ctx, googleMapsApiKey)
		var router = new this() {
			geoAddressProcessor client
			geoDistanceProcessor client
			geoRoadProcessor client
		}
		server.use(router)
	})
}
