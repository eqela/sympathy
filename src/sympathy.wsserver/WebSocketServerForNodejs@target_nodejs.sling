
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.nodejs
import sympathy.webserver

class is WebSocketServer:

depend "npm:ws:8.8.0"

class WebSocketServerConnectionForNodejs is WebSocketServerConnection
{
	prop websocket as dynamic

	func sendMessage(message as buffer) override:
		websocket.send(message)

	func close override:
		websocket.terminate()
}

var wss as dynamic

func createWSServer(server as WebServer) override
{
	var nws = NodeModule.require("ws")
	var ss = (server as WebServerForNodejs).server
	lang "js" {{{
		this.wss = new nws.WebSocketServer({ server: ss })
		this.wss.on('connection', (ws) => {
			const conn = this.onNewIncomingConnection(ws)
			ws.on('message', (message) => {
				this.onReceiveMessage(message, conn)
			})
			ws.on('close', (code, reason) => {
				conn.onConnectionClosed(code, reason.toString())
			})
			ws.on('error', (error) => {
				conn.onConnectionError(error.code, error.name)
			})
		})
		this.wss.on('listening', () => {
			this.onWSServerListening()
		})
		this.wss.on('close', () => {
			this.onWSServerConnectionClosed()
		})
		this.wss.on('error', (error) => {
			this.onWSServerConnectionError(error.name, error.message)
		})
	}}}
}

func onNewIncomingConnection(websocket as dynamic) private as WebSocketServerConnectionForNodejs
{
	var connection = new WebSocketServerConnectionForNodejs(ctx)
	connection.websocket = websocket
	onNewConnection(connection)
	return connection
}
