
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.sha
import jk.time
import jk.random
import sympathy.config

class:

var timeZone static = Integer.asInteger(ServerConfig.require("TIME_ZONE"))
var shaEncoder static = SHAEncoder.forSha256()
var random static = new Random()

func encodeText(rawText as string) static as string:
	return shaEncoder.getHashForString(rawText)

func generate(prefix as string = null, length as int = 64, allCaps as bool = true) static as string
{
	var sb = StringBuilder.forString(prefix)
	var l = length
	if l < 5:
		l = 5
	for(var i = 0; i < l; i++) {
		if random.nextIntegerBetween(0, 2) == 0 {
			sb.appendCharacter(random.nextIntegerBetween(48, 58) as! char)
		}
		else {
			if allCaps {
				sb.appendCharacter(Character.toUppercase(random.nextIntegerBetween(97, 123) as! char))
			}
			else {
				if random.nextIntegerBetween(0, 2) == 0 {
					sb.appendCharacter(Character.toUppercase(random.nextIntegerBetween(97, 123) as! char))
				}
				else {
					sb.appendCharacter(random.nextIntegerBetween(97, 123) as! char)
				}
			}
		}
	}
	return sb.toString()
}

func generateTimestampForNow static as long
{
	var utc = SystemClock.asUTCSeconds()
	var off = timeZone * 60 * 60
	return utc + off
}

func generateTimestampForToday static as long
{
	var off = timeZone * 60 * 60
	var now = SystemClock.asUTCSeconds() + off
	var time = now % 86400
	return now - time
}

/*
func hashText(text as string) static as string:
	return getInstance().encodeText(text)

func generateText(length as int) static as string:
	return getInstance().generate(null, length)

func generateAdminId(text as string) static as string:
	return getInstance().generate(text)

func generateUserRegistrationId static as string:
	return getInstance().generate("URG-", 6)

func generateBankDetailsId static as string:
	return getInstance().generate("CBD-", 6)

func generateCaptainPayoutId static as string:
	return getInstance().generate("CPA-", 6)

func generateTripId static as string:
	return getInstance().generate("TRP-", 6)

func generateBookingId static as string:
	return getInstance().generate("BOK-", 6)

func generateDeliveryId static as string:
	return getInstance().generate("DLV-", 6)

func generateTripInstanceId static as string:
	return getInstance().generate("DSC-", 6)

func generateDeliveryBookingId static as string:
	return getInstance().generate("DLB-", 6)

func generateVehicleId static as string:
	return getInstance().generate("VEH-", 6)

func generateVehicleRegistrationId static as string:
	return getInstance().generate("VRG-", 6)

func generateVehicleTypeId static as string:
	return getInstance().generate("VHT-", 6)

func generateOtpCode static as string:
	return getInstance().generate(null, 5)

func generateEmailOtpCode static as string:
	return getInstance().generate(null, 5)

func generatePayoutAttachmentId static as string:
	return getInstance().generate("POA", 6)

func generateDeliveryParticipantPhotoId static as string:
	return getInstance().generate("DPP-", 6)
*/
