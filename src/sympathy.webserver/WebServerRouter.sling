
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log

class is WebServerMiddleware:

var routes = new map<string,function<promise,WebServerRequest,DynamicMap>>

ctor:
	initializeRoutes()

func initializeRoutes virtual:
	nop

func addHealthCheckRoute
{
	addRoute("GET", "/health", func(req as WebServerRequest, vars as DynamicMap) async {
		req.setResponseStatus(200)
		await req.endResponse()
	})
}

func deleteAllRoutes:
	Map.clear(routes)

func addRoute(method as string, pattern as string, handler as function<promise,WebServerRequest,DynamicMap>)
{
	assert String.isNotEmpty(method)
	assert String.isNotEmpty(pattern)
	var id = String.toUpperCase(method) .. pattern
	routes[id] = handler
}

func handleRequest(request as WebServerRequest, next as function<promise>) async override
{
	var match as string
	var matchVars as DynamicMap
	var method = String.toUpperCase(request.getMethod())
	if String.isEmpty(method):
		method = "GET"
	var path = request.getPath()
	if String.isEmpty(path):
		path = "/"
	var comps = String.split(path, '/')
	var ccount = Vector.getSize(comps)
	foreach route in Map.getKeys(routes) {
		if not String.startsWith(route, method):
			continue
		var vars as DynamicMap
		var pattern = String.getEndOfString(route, String.getLength(method))
		var pcomps = String.split(pattern, '/')
		var plen = Vector.getSize(pcomps)
		var n1 = 0
		var n2 = 0
		loop {
			var s1 as string
			var s2 as string
			while String.isEmpty(s1) && n1 < ccount:
				s1 = Vector.get(comps, n1++)
			while String.isEmpty(s2) && n2 < plen:
				s2 = Vector.get(pcomps, n2++)
			if String.isEmpty(s1):
				s1 = null
			if String.isEmpty(s2):
				s2 = null
			if s1 == null && s2 == null {
				match = route
				matchVars = vars
				break
			}
			if s1 && String.startsWith(s2, ":") {
				if not vars:
					vars = new DynamicMap()
				vars.setString(String.getEndOfString(s2, 1), s1)
				continue
			}
			if s1 == s2 {
				continue
			}
			break
		}
		if match:
			break
	}
	if match {
		var handler = Map.get(routes, match)
		if handler {
			if not matchVars:
				matchVars = new DynamicMap()
			var wasFound = true
			try {
				await handler(request, matchVars)
			}
			catch e {
				if e is WebServerException && (e as! WebServerException).httpStatus == 404 {
					wasFound = false
				}
				else {
					throw e
				}
			}
			if wasFound:
				return
		}
	}
	await next()
}
