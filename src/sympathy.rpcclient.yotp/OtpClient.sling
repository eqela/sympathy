
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2023 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import sympathy.otp
import sympathy.rpcclient.common

class is RpcClient:

ctor:
	baseUrl = requireConfigValue("OTP_SERVICE_URL")

func sendOtp(mobileNumber as string) async as string
{
	var params = new map {
		recipient mobileNumber
	}
	return await queryString("sendOtp", params)
}

func verifyOtpCode(code as string, mobileNumber as string) async
{
	var params = new map {
		code code
		mobileNumber mobileNumber
	}
	await query("verifyOtpCode", params)
}

func checkMobileNumberValidationAttempts(mobileNumber as string) async
{
	var params = new map {
		mobileNumber mobileNumber
	}
	await query("checkMobileNumberValidationAttempts", params)
}

func getOtpById(otpId as string) async as Otp
{
	var params = new map {
		otpId otpId
	}
	return Otp.forData(await queryMap("getOtpById", params))
}
