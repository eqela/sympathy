
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.json
import sympathy.apiclient.common

class is RestApiClient:

model LinkedInUserDetails
{
	id as string
	localizedFirstName as string
	localizedLastName as string
}

func forAccessToken(ctx as LoggingContext, accessToken as string) static as this
{
	var v = new this(ctx)
	v.accessToken = accessToken
	return v
}

prop accessToken as string

func getUserDetails async as LinkedInUserDetails
{
	assert accessToken
	var headers = new KeyValueList<string, string>()
	headers.add("Authorization", "Bearer " .. accessToken)
	var res = await request("GET", "https://api.linkedin.com/v2/me", headers, null)
	var data = res.getBodyAsDynamicMap()
	return LinkedInUserDetails.forData(data)
}

func getUserEmailAddress async as string
{
	assert accessToken
	var headers = new KeyValueList<string, string>()
	headers.add("Authorization", "Bearer " .. accessToken)
	var res = await request("GET", "https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))", headers, null)
	var dm = res.getBodyAsDynamicMap()
	var elements =  dm.getDynamicVector("elements")
	var emailAddress as string
	foreach handle as DynamicMap in elements.toVectorOfDynamicMaps() {
		var v = handle.getDynamicMap("handle~")
		emailAddress = v.getString("emailAddress")
	}
	return emailAddress
}

func getUserProfilePictureUrl async as string
{
	assert accessToken
	var headers = new KeyValueList<string, string>()
	headers.add("Authorization", "Bearer " .. accessToken)
	var res = await request("GET", "https://api.linkedin.com/v2/me?projection=(id,profilePicture(displayImage~digitalmediaAsset:playableStreams))", headers, null)
	var dm = res.getBodyAsDynamicMap()
	var profilePicture = dm.getDynamicMap("profilePicture")
	var displayImage = profilePicture.getDynamicMap("displayImage~")
	var elements =  displayImage.getDynamicVector("elements")
	var profilePictureUrl as string
	foreach di as DynamicMap in elements.toVectorOfDynamicMaps() {
		var identifiers = di.getDynamicVector("identifiers")
		foreach identifier as DynamicMap in identifiers.toVectorOfDynamicMaps() {
			profilePictureUrl = identifier.getString("identifier")
		}
	}
	return profilePictureUrl
}
