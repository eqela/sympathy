
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

class:

func extractDurationAndDistance(data as DynamicMap) static as DynamicVector
{
	assert data
	var rows = assert data.get("rows") as DynamicVector
	var dv = new DynamicVector()
	foreach element as DynamicMap in rows.toVector() {
		var el = assert element.getDynamicVector("elements")
		var ee = assert el.get(0) as DynamicMap
		var rr = doExtractDurationAndDistance(ee)
		dv.appendObject(rr)
	}
	return dv
}

func doExtractDurationAndDistance(element as DynamicMap) static as DynamicMap
{
	var distance = assert element.get("distance") as DynamicMap
	assert String.isNotEmpty(distance.getString("text"))
	var duration = assert element.get("duration") as DynamicMap
	assert String.isNotEmpty(duration.getString("text"))
	var result = new DynamicMap()
	var di = distance.getString("text") // In Miles (mi) ex. 5.1 mi
	var du = duration.getString("text") // ETA
	var ss = String.split(di, ' ')
	var nu = Vector.get(ss, 0)
	var un = Vector.get(ss, 1)
	var mi as double
	if String.equals(un, "ft") {
		mi = Double.asDouble(nu) * 0.000189394
	}
	else if String.equals(un, "mi") {
		mi = Double.asDouble(nu)
	}
	var ckm = String.forDouble(mi / 0.62137)
	var km = Double.asDouble(String.getSubString(ckm, 0, String.getIndexOfCharacter(ckm, '.') + 2))
	result.setString("duration", du)
	result.setDouble("distance", km)
	return result
}
