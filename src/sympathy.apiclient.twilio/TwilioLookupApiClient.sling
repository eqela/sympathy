
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.url
import jk.json

class is TwilioApiClient:

meta {
	description "SOURCE : https://www.twilio.com/docs/lookup/api"
}

model PhoneNumberInfo public
{
	caller_name as string
	country_code as string
	phone_number as string
	national_format as string
	carrier as string
}

model Error
{
	code as int
	message as string
}

func lookupPhoneNumber(phoneNumber as string, countryCode as string) async as PhoneNumberInfo
{
	meta {
		description "Returns phone number information."
	}
	var headers = createHeaders()
	assert String.startsWith(phoneNumber, "+"):
		throw ExceptionWithError.forCode("invalidPhoneNumber", "Invalid phone number")
	var resp = await request("GET", "https://lookups.twilio.com/v1/PhoneNumbers/" .. URLEncoder.encode(phoneNumber) .. "?CountryCode=" .. URLEncoder.encode(countryCode), headers, null)
	var statusCode = resp.statusCode
	if statusCode != "201" || statusCode != "200":
		throw ExceptionWithError.forCode(statusCode, resp.statusMessage)
	return PhoneNumberInfo.forData(JSONParser.parse(resp.body) as DynamicMap)
}
