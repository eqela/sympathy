
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.json
import sympathy.webserver
import sympathy.wsserver

class is SympathySMSProvider:

var ctx as LoggingContext
var engine as SympathyWSEngine

ctor(ctx as LoggingContext, server as WebServer)
{
	this.ctx = ctx
	var smsWSServer = WebSocketServer.instance(ctx)
	smsWSServer.createWSServer(server)
	this.engine = new SympathyWSEngine(ctx)
	smsWSServer.eventHandler = engine
}

func send(toNumber as string, message as string) override  async
{
	var smsdata = new DynamicMap()
	smsdata.setInteger("type", 1)
	smsdata.setInteger("priority", 1)
	smsdata.setString("message", message)
	smsdata.setObject("recipients", new DynamicVector().appendString(toNumber))
	Log.debug(ctx, "Sending message data `" .. JSONEncoder.encode(smsdata) .. "'")
	var message = SMSAppMessage.forDataMap(smsdata)
	engine.sendBroadcastMessage(message.toBuffer())
}
