
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.json
import sympathy.config
import sympathy.wsserver

class is WebSocketServerEventHandler:

var manager as ConnectionManager
var ctx as LoggingContext

ctor(ctx as LoggingContext):
	this.ctx = ctx

prop secretKey:secretKeyValue as string
{
	get {
		if not secretKeyValue:
			secretKeyValue = ServerConfig.accept("SMS_SECRET_KEY")
		return secretKeyValue
	}
}

class ConnectionHandler
{
	prop authenticated as bool
	prop connection as WebSocketServerConnection

	func sendMessage(message as buffer)
	{
		if authenticated:
			connection.sendMessage(message)
	}

	func close:
		connection.close()
}

class ConnectionManager
{
	var connections as vector<ConnectionHandler>
	
	func add(connection as ConnectionHandler)
	{
		if not connections:
			connections = new vector<ConnectionHandler>
		connections += connection
	}

	func getConnectionHandler(connection as WebSocketServerConnection) as ConnectionHandler
	{
		assert connections
		var handler as ConnectionHandler
		foreach cc in connections {
			var ch = cc.connection
			if ch == connection {
				handler = cc
				break
			}
		}
		return handler
	}

	func sendBroadcastMessage(message as buffer)
	{
		assert connections
		foreach cc in connections:
			cc.sendMessage(message)
	}
}

func sendBroadcastMessage(message as buffer)
{
	assert manager
	manager.sendBroadcastMessage(message)
}

func onNewConnection(connection as WebSocketServerConnection)
{
	Log.debug(ctx, "Incomming new connection")
	if not manager:
		manager = new ConnectionManager()
	var handler = new ConnectionHandler()
	handler.connection = connection
	manager.add(handler)
}

func onReceiveMessage(message as buffer, connection as WebSocketServerConnection)
{
	assert manager
	var handler = assert manager.getConnectionHandler(connection)
	if not handler.authenticated:
		authenticateConnection(message, handler)
}

func authenticateConnection(data as buffer, connection as ConnectionHandler)
{
	var cred = JSONParser.parse(String.forUTF8Buffer(data)) as DynamicMap
	if not String.equals(secretKey, cred.getString("auth")) {
		Log.error(ctx, "Failed to authenticate connection")
		connection.close()
	}
	var v = new DynamicMap()
	v.setInteger("type", 2)
	v.setString("command", "authentication_acknowledged")
	var m = assert String.toUTF8Buffer(JSONEncoder.encode(v)) {
		Log.error(ctx, "Failed to create authentication message")
		connection.close()
	}
	connection.authenticated = true
	connection.sendMessage(m)
}

func onWSServerConnectionClosed:
	Log.debug(ctx, "On Connection closed")

func onWSServerConnectionError(code as string, message as string):
	Log.error(ctx, "ERROR: " .. code .. ": " .. message)

func onWSServerListening:
	Log.debug(ctx, "Web-Socket server listening...")
