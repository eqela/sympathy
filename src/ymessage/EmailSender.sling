
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import sympathy.apiclient.smtp

class:

func getInstance static as this
{
	if not instance:
		instance = new this()
	return instance
}

func initialize(config as DynamicMap, signature as EmailSignature, ctx as LoggingContext) static as bool
{
	assert config
	var ss = assert SMTPSender.forConfiguration(config, ctx)
	var vv = getInstance()
	vv.setSender(ss)
	vv.setContext(ctx)
	vv.setSignature(signature)
	return true
}

func sendEmail(message as SMTPMessage, senderData as DynamicMap = null, onSuccessHandler as function = null, onErrorHandler as function<void, Error> = null) static
{
	var vv = getInstance()
	vv.doSendEmail(message, senderData, onSuccessHandler, onErrorHandler)
}

func doSendEmail(message as SMTPMessage, senderData as DynamicMap, onSuccessHandler as function, onErrorHandler as function<void, Error>)
{
	assert sender
	var listener = new MySMTPSenderListener()
		.setOnSuccess(onSuccessHandler)
		.setOnError(onErrorHandler)
		.setContext(context)
	if senderData {
		sender.setMyName(senderData.getString("name"))
		sender.setMyAddress(senderData.getString("emailAddress"))
	}
	sender.send(message, listener)
}

func createEmailBodyString(name as string, content as string) static as string
{
	var vv = getInstance()
	return vv.doCreateEmailBodyString(name, content)
}

func doCreateEmailBodyString(name as string, content as string) as string
{
	var htmlString = [[
		<style>
			p {
				font-weight:400;
				font-size:14px;
			}
		</style>
		<p>Hi __name__,</p>
		<p style="margin: 50px 0px;">__content__</p>
		<p><b>HOP Movers</b></p>
		<img src="__iconUrl__" />
		<p>__contactInfo__</p>
		<p>FB <a href="__hopMoverWebsite__">hopmovers</a> | <a href="__hopMoverWebsite__">www.hopmovers.com</a></p>
	]]
	htmlString = String.replaceString(htmlString, "__name__", name)
	htmlString = String.replaceString(htmlString, "__content__", content)
	if signature {
		htmlString = String.replaceString(htmlString, "__contactInfo__", signature.contactInfo)
		htmlString = String.replaceString(htmlString, "__hopMoverWebsite__", signature.hopMoverWebsite)
		htmlString = String.replaceString(htmlString, "__iconUrl__", signature.iconUrl)
	}
	return htmlString
}

var instance static as this
var context as LoggingContext
var sender as SMTPSender
var signature as EmailSignature

func setSender(sender as SMTPSender):
	this.sender = sender

func setContext(context as LoggingContext):
	this.context = context

func setSignature(signature as EmailSignature):
	this.signature = signature

class MySMTPSenderListener is SMTPSenderListener
{
	pvar context as LoggingContext
	pvar onSuccess as function
	pvar onError as function<void, Error>

	func onSMTPSendComplete(message as SMTPMessage, result as SMTPClientResult)
	{
		assert result.getStatus() {
			var trans = result.getTransactions()
			var error = Error.forCode("SMTPError")
			var dtlsb = new StringBuilder()
			if trans {
				foreach v as SMTPClientTransactionResult in trans.toVector() {
					var msg = v.getErrorMessage()
					dtlsb.appendString("\n\t-> " .. msg)
				}
			}
			var ermsg = dtlsb.toString()
			error.setDetail(ermsg)
			Log.error(context, "SMTP Error: " .. ermsg)
			if onError:
				onError(error)
		}
		if onSuccess:
			onSuccess()
	}
}
