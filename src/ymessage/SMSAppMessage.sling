
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.random
import jk.json
import jk.time
import jk.md5

class:

const UNKNOWN_TYPE = 0
const DATA_TYPE = 1

func forDataBuffer(data as buffer) static as this
{
	var v = new this().setDataBuffer(data)
	assert v.initialize()
	return v
}

func forDataMap(dataMap as DynamicMap) static as this
{
	var v = new this().setDataMap(dataMap)
	assert v.initialize()
	return v
}

pvar smsId as string
pvar recipients as DynamicVector
pvar message as string
pvar priority as int
var timestamp private as long
var data private as buffer
var dataMap private as DynamicMap
var type private as int

func generateId as string
{
	var sb = new StringBuilder()
	sb.appendInteger(new Random().nextInteger())
	sb.appendLong(SystemClock.asSeconds())
	return "SMS-" .. MD5Encoder.encodeString(sb.toString())
}

func initialize as bool
{
	dataMap = JSONParser.parse(data) as DynamicMap
	assert dataMap
	timestamp = SystemClock.asSeconds()
	smsId = generateId()
	recipients = dataMap.getDynamicVector("recipients")
	message = dataMap.getString("message")
	type = dataMap.getInteger("type")
	priority = dataMap.getInteger("priority")
	return true
}

func setDataBuffer(data as buffer) as this
{
	this.data = data
	return this
}

func setDataMap(data as DynamicMap) as this
{
	this.data = String.toUTF8Buffer(JSONEncoder.encode(data, false))
	return this
}

func getType as int:
	return type

func toBuffer as buffer
{
	assert dataMap
	dataMap.setString("smsId", smsId)
	dataMap.setObject("recipients", recipients)
	dataMap.setLong("timestamp", timestamp)
	dataMap.setInteger("type", type)
	dataMap.setInteger("priority", priority)
	return String.toUTF8Buffer(JSONEncoder.encode(dataMap))
}
