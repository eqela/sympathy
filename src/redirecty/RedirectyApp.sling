
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class is WebServer:

import jk.json
import jk.env
import jk.log
import jk.fs
import jk.http.server
import jk.server.web

var rules as DynamicMap
var defaultAddress as string

func configure(key as string, value as string, relativeTo as File, error as Error) override as bool
{
	if String.equals(key, "rules") {
		rules = JSONParser.parse(value) as DynamicMap
		return true
	}
	if String.equals(key, "defaultAddress") {
		defaultAddress = value
		return true
	}
	return base.configure(key, value, relativeTo, error)
}

ctor
{
	base()
	var cdir as File
	var file = CommonPath.getCodeFileForObject(this)
	if file:
		cdir = file.getParent()
	if not cdir:
		cdir = CommonPath.getAppDirectory()
	if cdir {
		var cffl = cdir.entry("redirecty.config")
		if cffl.isFile():
			setConfigFile(cffl)
	}
}

func initializeServer(server as HTTPServer) override as bool
{
	assert base.initializeServer(server)
	if not rules && String.isEmpty(defaultAddress) {
		Log.error(ctx, "No rules and default address specified. Use -Orules=... or -OdefaultAddress=... to configure")
		return false
	}
	var stack = new HTTPServerRequestHandlerStack()
	stack.pushRequestHandler(func(req as HTTPServerRequest, next as function) {
		var path as string
		var rdto = getRedirectTo(req.getURLPath())
		if rdto {
			path = rdto
		}
		else if defaultAddress {
			path = defaultAddress
		}
		if path {
			req.sendRedirect(path)
			return
		}
		next()
	})
	server.pushRequestHandler(stack)
	return true
}

func getRedirectTo(path as string) private as string
{
	assert rules
	var rule = rules.getString(path)
	if rule:
		return rule
	var comp = String.split(path, '/')
	Vector.removeFirst(comp)
	foreach rule in rules.getKeys() {
		var rcom = String.split(rule, '/')
		if String.startsWith(rule, "/"):
			Vector.removeFirst(rcom)
		var index = 0
		var found = true
		loop {
			var str1 = Vector.get(comp, index)
			var str2 = Vector.get(rcom, index)
			if String.equals(str2, "**") {
				break
			}
			else if String.equals(str2, "*") {
				if Vector.getSize(comp) > index + 1:
					found = false
				break
			}
			else if String.equalsIgnoreCase(str1, str2) {
				index ++
				continue
			}
			found = false
			break
		}
		if found:
			return rules.getString(rule)
	}
	return null
}

func main(args as array<string>) static as int #main:
	return new this().executeMain(args)
