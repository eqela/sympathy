
/*
 * This file is part of Eqela Sympathy
 * Copyright (c) 2020-2022 J42 Pte Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import sympathy.email

class is EmailProvider:

prop ctx as LoggingContext
prop apiKey as string
prop sender as EmailUser

ctor(ctx as LoggingContext):
	this.ctx = ctx

func sendEmailContent(recipients as EmailRecipients, content as EmailContent) override async
{
	if !sender:
		Error.throw("noSenderObject", null)
	var senderData = new SendGridApiClient.EmailUser()
	senderData.name = sender.name
	senderData.email = sender.emailAddress
	var sendGrid = new SendGridApiClient(ctx) {
		apiKey apiKey
		sender senderData
	}
	var rcpts = recipients.to
	if !rcpts:
		Error.throw("noRecipientsObject", null)
	var recipients = new vector<SendGridApiClient.EmailUser>
	foreach rcpt in rcpts {
		var semail = new SendGridApiClient.EmailUser()
		semail.email = rcpt.emailAddress
		recipients += semail
	}
	var contents = new vector<SendGridApiClient.EmailContent>
	var scontent = new SendGridApiClient.EmailContent()
	scontent.type = content.contentType
	scontent.value = content.content
	contents += scontent
	await sendGrid.sendEmailContent(recipients, contents, content.subject)
}

func sendEmailTemplate(recipients as EmailRecipients, templateName as string, language as string, parameters as DynamicMap) override async
{
	if !sender:
		Error.throw("noSenderObject", null)
	var senderData = new SendGridApiClient.EmailUser()
	senderData.name = sender.name
	senderData.email = sender.emailAddress
	var sendGrid = new SendGridApiClient(ctx) {
		apiKey apiKey
		sender senderData
	}
	var rcpts = recipients.to
	if !rcpts:
		Error.throw("noRecipientsObject", null)
	var recipients = new vector<SendGridApiClient.EmailUser>
	foreach rcpt in rcpts {
		var semail = new SendGridApiClient.EmailUser()
		semail.email = rcpt.emailAddress
		recipients += semail
	}
	await sendGrid.sendEmailTemplate(recipients, templateName, parameters)
}
