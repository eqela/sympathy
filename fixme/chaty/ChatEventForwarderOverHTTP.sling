
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.json
import jk.web.json

class is JSONAPIClient:

macro CHECK_SESSION(sessionId, callback)
{
	assert String.isNotEmpty(sessionId):
		callback(Error.instance("no_session_id", "No session id"))
	var headers = new KeyValueList<string,string>()
	headers.add(authParameterKey, sessionId)
	headers.add("Content-Type", "application/json")
}

func forConfiguration(authConfig as DynamicMap) static as this
{
	assert authConfig
	var authBaseURL = authConfig.getString("authBaseURL")
	assert String.isNotEmpty(authBaseURL)
	var authParameterKey = authConfig.getString("authParameterKey")
	assert String.isNotEmpty(authParameterKey)
	var idParameterKey = authConfig.getString("idParameterKey")
	assert String.isNotEmpty(idParameterKey)
	var startChatChannelURL = authConfig.getString("startChatChannelURL")
	assert String.isNotEmpty(startChatChannelURL)
	var startGroupChatChannelURL = authConfig.getString("startGroupChatChannelURL")
	assert String.isNotEmpty(startGroupChatChannelURL)
	var channelRecipientAndExternalDataURL = authConfig.getString("channelRecipientAndExternalDataURL")
	assert String.isNotEmpty(channelRecipientAndExternalDataURL)
	var v = new this()
	v.setAuthBaseURL(authBaseURL)
	v.setAuthParameterKey(authParameterKey)
	v.setStartChatChannelURL(startChatChannelURL)
	v.setStartGroupChatChannelURL(startGroupChatChannelURL)
	v.setChannelRecipientAndExternalDataURL(channelRecipientAndExternalDataURL)
	return v
}

prop authBaseURL as string
prop authParameterKey as string
prop idParameterKey as string
prop startChatChannelURL as string
prop startGroupChatChannelURL as string
prop channelRecipientAndExternalDataURL as string

func getFullURL(api as string) override as string
{
	var url = authBaseURL
	if String.isEmpty(url):
		url = "/"
	if url == "/" {
		if String.startsWith(api, "/"):
			return api
		return url .. api
	}
	if String.endsWith(url, "/") {
		if String.startsWith(api, "/"):
			return url .. String.getEndOfString(api, 1)
		return url .. api
	}
	if String.startsWith(api, "/"):
		return url .. api
	return url .. "/" .. api
}

func get(url as string, headers as KeyValueList<string,string>, callback as function<void, DynamicMap, Error>) private
{
	doSendRequest("GET", getFullURL(url), headers, null, func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		assert body:
			callback(null, Error.instance("failed_to_connect", "Failed to connect to server"))
		var json = assert JSONParser.parse(body) as DynamicMap:
			callback(null, Error.forMessage("Invalid JSON Format from auth server: '" .. String.asString(body) .. "'"))
		callback(json, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}

func post(url as string, headers as KeyValueList<string,string>, data as DynamicMap, callback as function<void, DynamicMap, Error>) private
{
	doSendRequest("POST", getFullURL(url), headers, String.toUTF8Buffer(JSONEncoder.encode(data)), func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		assert body:
			callback(null, Error.instance("failed_to_connect", "Failed to connect to server"))
		var json = assert JSONParser.parse(body) as DynamicMap:
			callback(null, Error.forMessage("Invalid JSON Format from auth server: '" .. String.asString(body) .. "'"))
		callback(json, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}

func put(url as string, headers as KeyValueList<string,string>, data as DynamicMap, callback as function<void, DynamicMap, Error>) private
{
	doSendRequest("PUT", getFullURL(url), headers, String.toUTF8Buffer(JSONEncoder.encode(data)), func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		assert body:
			callback(null, Error.instance("failed_to_connect", "Failed to connect to server"))
		var json = assert JSONParser.parse(body) as DynamicMap:
			callback(null, Error.forMessage("Invalid JSON Format from auth server: '" .. String.asString(body) .. "'"))
		callback(json, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}

func delete(url as string, headers as KeyValueList<string,string>, callback as function<void, DynamicMap, Error>) private
{
	doSendRequest("DELETE", getFullURL(url), headers, null, func(responseHeaders as KeyValueList<string,string>, body as buffer) {
		assert body:
			callback(null, Error.instance("failed_to_connect", "Failed to connect to server"))
		var json = assert JSONParser.parse(body) as DynamicMap:
			callback(null, Error.forMessage("Invalid JSON Format from auth server: '" .. String.asString(body) .. "'"))
		callback(json, null)
	}, func(error as Error) {
		callback(null, error)
	}, 0)
}

func onStartChatChannel(creatorUserId as string, sessionId as string, channelId as string, callback as function<void, Error>)
{
	CHECK_SESSION(sessionId, callback)
	var data = new DynamicMap()
	data.setString("creatorUserId", creatorUserId)
	data.setString("channelId", channelId)
	post(startChatChannelURL, headers, data, func(response as DynamicMap, e as Error) {
		assert not e:
			callback(e)
		assert String.equals(response.getString("status"), "ok"):
			callback(Error.instance("error_from_http_server", "Encounter error from http server"))
		callback(null)
	})
}

func onStartGroupChatChannel(creatorUserId as string, sessionId as string, channelId as string, callback as function<void, Error>)
{
	CHECK_SESSION(sessionId, callback)
	var data = new DynamicMap()
	data.setString("creatorUserId", creatorUserId)
	data.setString("channelId", channelId)
	post(startGroupChatChannelURL, headers, data, func(response as DynamicMap, e as Error) {
		assert not e:
			callback(e)
		assert String.equals(response.getString("status"), "ok"):
			callback(Error.instance("error_from_http_server", "Encounter error from http server"))
		callback(null)
	})
}

func getChannelRecipientAndExternalData(sessionId as string, ids as DynamicVector, externalId as string, callback as function<void, DynamicMap, Error>)
{
	assert String.isNotEmpty(sessionId):
		callback(null, Error.instance("no_session_id", "No session id"))
	var headers = new KeyValueList<string,string>()
	headers.add(authParameterKey, sessionId)
	headers.add("Content-Type", "application/json")
	var data = new DynamicMap()
	data.setObject("recipientIds", ids)
	data.setString("externalId", externalId)
	post(channelRecipientAndExternalDataURL, headers, data, func(response as DynamicMap, e as Error) {
		assert not e:
			callback(null, e)
		assert String.equals(response.getString("status"), "ok"):
			callback(null, Error.instance("error_from_http_server", "Encounter error from http server"))
		var data = assert response.getDynamicMap("data"):
			callback(null, Error.instance("invalid_server_response", "Invalid response from authentication server"))
		callback(data, null)
	})
}
