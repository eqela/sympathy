
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.log
import jk.sql
import jk.random
import symlib.chat

class:

const CHAT_CHANNELS = "chat_channels"
const CHAT_RECIPIENTS = "chat_recipients"
const CHAT_MESSAGES = "chat_messages"
var random private static as Random
var ctx private static as LoggingContext
var db private static as SQLDatabase

func initialize(database as SQLDatabase, context as LoggingContext) static as bool
{
	assert database:
		Log.error(context, "SQL database object is null.")
	random = new Random()
	ctx = context
	db = database
	db.ensureTableExists(Channel.SQL.getTableInfo(CHAT_CHANNELS))
	db.ensureTableExists(Recipient.SQL.getTableInfo(CHAT_RECIPIENTS))
	db.ensureTableExists(Message.SQL.getTableInfo(CHAT_MESSAGES))
	Log.info(context, "DataManager successfully initialized.")
	return true
}

func getDb static as SQLDatabase:
	return db

func hashText(rawText as string) static as string:
	return MD5Encoder.encode(rawText)

func generateCode(prefix as string = null, length as int = 8, allCaps as bool = true) static as string
{
	var sb = StringBuilder.forString(prefix)
	var l = length
	if l < 8:
		l = 8
	for(var i = 0; i < l; i++) {
		if random.nextInt(0, 2) == 0 {
			sb.append(random.nextInt(48, 58) as! char)
		}
		else {
			if allCaps {
				sb.append(Character.toUppercase(random.nextInt(97, 123) as! char))
			}
			else {
				if random.nextInt(0, 2) == 0 {
					sb.append(Character.toUppercase(random.nextInt(97, 123) as! char))
				}
				else {
					sb.append(random.nextInt(97, 123) as! char)
				}
			}
		}
	}
	return sb.toString()
}

func updateReadStatus(channelId as string, userId as string) static
{
	assert String.isNotEmpty(channelId) && String.isNotEmpty(userId)
	db.execute(db.prepare("UPDATE " .. CHAT_RECIPIENTS .. " SET readIndex = COALESCE((SELECT MAX(messageIndex + 1) AS topIndex FROM " .. CHAT_MESSAGES .. " WHERE channelId = ?), 0) WHERE channelId = ? AND userId = ?;").addParamString(channelId).addParamString(channelId).addParamString(userId))
}

func getReadStatusAsMapForUserId(userId as string) static as DynamicMap
{
	var itr = assert db.query(db.prepare("SELECT * FROM " .. CHAT_RECIPIENTS .. " WHERE userId = ?;").addParamString(userId))
	var m = new DynamicMap()
	loop {
		var c = itr.next()
		if not c:
			break
		var channelId = c.getString("channelId")
		var v = db.querySingleRow(db.prepare("SELECT COALESCE((SELECT MAX(messageIndex + 1) FROM " .. CHAT_MESSAGES .. " WHERE channelId = ?), 0) - COALESCE(readIndex, 0) AS unreadCount FROM " .. CHAT_RECIPIENTS .. " WHERE channelId = ? AND userId = ?;").addParamString(channelId).addParamString(channelId).addParamString(userId))
		if v {
			var uc = v.getLongInteger("unreadCount")
			if uc < 0:
				uc = 0
			m.set(channelId, uc)
		}
	}
	return m
}

func getReadStatusAsMapForChannelId(channelId as string) static as DynamicMap
{
	var itr = assert db.query(db.prepare("SELECT * FROM " .. CHAT_RECIPIENTS .. " WHERE channelId = ?;").addParamString(channelId))
	var m = new DynamicMap()
	loop {
		var c = itr.next()
		if not c:
			break
		var userId = c.getString("userId")
		var v = db.querySingleRow(db.prepare("SELECT COALESCE((SELECT MAX(messageIndex + 1) FROM " .. CHAT_MESSAGES .. " WHERE channelId = ?), 0) - COALESCE(readIndex, 0) AS unreadCount FROM " .. CHAT_RECIPIENTS .. " WHERE channelId = ? AND userId = ?;").addParamString(channelId).addParamString(channelId).addParamString(userId))
		if v {
			var uc = v.getLongInteger("unreadCount")
			if uc < 0:
				uc = 0
			m.set(userId, uc)
		}
	}
	return m
}

func getChannel(channelId as string) static as Channel:
	return Channel.forDynamicMap(db.querySingleRow(db.prepare("SELECT * FROM " .. CHAT_CHANNELS .. " WHERE channelId = ?;").addParamString(channelId)))

func getChannel(channelId as string, callback as function<void, Channel>) static:
	Channel.SQL.queryByChannelId(db, CHAT_CHANNELS, channelId, callback)

func createGetChannelsQueryString(isForCount as bool, externalIdPattern as string) private static as string
{
	var sb = new StringBuilder()
	sb.append("SELECT * FROM " .. DataManager.CHAT_CHANNELS .. " WHERE (channelCreatorUserId = ? OR channelId IN (SELECT channelId FROM " .. DataManager.CHAT_RECIPIENTS .. " WHERE userId = ?))")
	if externalIdPattern:
		sb.append(" AND externalId LIKE '%" .. externalIdPattern .. "%'")
	if not isForCount:
		sb.append(" ORDER BY timeStampLastUpdated DESC, timeStampCreated DESC LIMIT ? OFFSET ?")
	sb.append(";")
	return sb.toString()
}

func getChannels(userId as string, externalIdPattern as string, page as int, limit as int, callback as function<void, DynamicVector, int, int>) static
{
	if limit <= 0:
		limit = 20
	var offset = page - 1
	if offset < 0:
		offset = 0
	var db = assert getDb():
		callback(new DynamicVector(), 0, 0)
	assert String.isNotEmpty(userId):
		callback(new DynamicVector(), 0, 0)
	var st = db.prepare(createGetChannelsQueryString(false, externalIdPattern)).addParamString(userId).addParamString(userId).addParamInteger(limit).addParamInteger(offset * limit)
	db.query(st, func(itr as SQLResultSetIterator) {
		assert itr:
			callback(new DynamicVector(), 0, 0)
		var data = assert db.query(db.prepare(createQueryString(true, externalIdPattern)).addParamString(userId).addParamString(userId)):
			callback(new DynamicVector(), 0, 0)
		var dvector = assert data.toVectorOfMaps():
			callback(new DynamicVector(), 0, 0)
		var count = dvector.getSize()
		var pageCount = count / limit
		if (count % limit) > 0:
			pageCount++
		callback(itr.toVectorOfMaps(), pageCount, count)
	})
}

func getRecipientIdsForChannelId(channelId as string) static as DynamicVector:
	return Recipient.getRecipientIdsForChannelId(channelId)

func getMessages(channelId as string, page as int, limit as int, callback as function<void, DynamicVector, int, int>) static:
	Message.getMessages(channelId, page, limit, callback)

func getRecentMessage(channelId as string) static as DynamicMap:
	return Message.getRecentMessage(channelId)

func getRecentMessages(channelId as string, page as int, limit as int) static as DynamicVector:
	return Message.getRecentMessages(channelId, page, limit)

func getChannelIdForRecipients(recipients as DynamicVector, creatorUserId as string) static as string:
	return Recipient.getChannelIdForRecipients(recipients, creatorUserId)

func deleteMessages(channelId as string, userId as string, messageIds as DynamicVector, callback as function<void, Error>) static
{
	getChannel(channelId, func(channel as Channel) {
		assert channel:
			callback(Error.instance("invalid_channel_id", "Invalid channel id"))
		assert messageIds && messageIds.getSize() > 0:
			callback(Error.instance("no_message_ids", "No message ids"))
		var messageIdMap = new DynamicMap()
		foreach messageId in messageIds.toVectorOfStrings():
			messageIdMap.set(messageId, messageId)
		assert messageIdMap.getCount() > 0:
			callback(Error.instance("no_message_ids", "No message ids"))
		var ids = messageIdMap.getKeys()
		assert ids && sizeof ids > 0:
			callback(Error.instance("internal_error", "Internal error"))
		var sb = new StringBuilder()
		sb.append("SELECT COUNT(*) AS size FROM " .. CHAT_MESSAGES .. " WHERE creatorUserId = ? AND messageId IN (")
		var first = true
		foreach id in ids {
			if not first:
				sb.append(", ")
			first = false
			sb.append("?")
		}
		sb.append(");")
		var stmt = assert db.prepare(sb.toString()):
			callback(Error.instance("internal_error", "Internal error"))
		stmt.addParamString(userId)
		foreach id in ids:
			stmt.addParamString(id)
		var result = assert db.querySingleRow(stmt):
			callback(Error.instance("internal_error", "Internal error"))
		var diff = result.getLongInteger("size") - sizeof ids
		assert diff < 1:
			callback(Error.instance("not_allowed", "Cannot delete messages that doesn't belong to you."))
		sb = new StringBuilder()
		sb.append("DELETE FROM " .. CHAT_MESSAGES .. " WHERE creatorUserId = ? AND messageId IN (")
		first = true
		foreach id in ids {
			if not first:
				sb.append(", ")
			first = false
			sb.append("?")
		}
		sb.append(");")
		stmt = db.prepare(sb.toString())
		assert stmt:
			callback(Error.instance("internal_error", "Internal error"))
		stmt.addParamString(userId)
		foreach id in ids:
			stmt.addParamString(id)
		assert db.execute(stmt):
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func deleteChannel(channelId as string, userId as string, callback as function<void, Error>) static
{
	getChannel(channelId, func(channel as Channel) {
		assert channel:
			callback(Error.instance("invalid_channel_id", "Invalid channel id"))
		assert String.isEmpty(channel.getExternalId()):
			callback(Error.instance("not_allowed", "Not allowed"))
		assert String.equals(channel.getChannelCreatorUserId(), userId):
			callback(Error.instance("not_allowed", "Not allowed"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_CHANNELS .. " WHERE channelId = ?;").addParamString(channelId)):
			callback(Error.instance("internal_error", "Internal error"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_RECIPIENTS .. " WHERE channelId = ?;").addParamString(channelId)):
			callback(Error.instance("internal_error", "Internal error"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_MESSAGES .. " WHERE channelId = ?;").addParamString(channelId)):
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func deleteChannelForExternalId(externalId as string, callback as function<void, Error>) static
{
	getChannelForExternalId(externalId, func(channel as Channel) {
		assert channel:
			callback(Error.instance("invalid_external_id", "Invalid external id"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_CHANNELS .. " WHERE channelId = ?;").addParamString(channel.getChannelId())):
			callback(Error.instance("internal_error", "Internal error"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_RECIPIENTS .. " WHERE channelId = ?;").addParamString(channel.getChannelId())):
			callback(Error.instance("internal_error", "Internal error"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_MESSAGES .. " WHERE channelId = ?;").addParamString(channel.getChannelId())):
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func updateRecipients(channelId as string, creatorUserId as string, newRecipients as DynamicVector, callback as function<void, Error>) static
{
	var channel = assert getChannel(channelId):
		callback(Error.instance("invalid_channel_id", "Invalid channel id"))
	var recipients = getRecipientIdsForChannelId(channelId)
	assert recipients && recipients.getSize() > 0:
		callback(Error.instance("invalid_channel_id", "Invalid channel id"))
	assert newRecipients && newRecipients.getSize() >= 0:
		callback(Error.instance("empty_recipient_list", "Empty recipient list"))
	var userIdMap = new DynamicMap()
	foreach userId in newRecipients.toVectorOfStrings() {
		assert String.isNotEmpty(userId):
			callback(Error.instance("empty_user_id_found", "Empty user id found in the list of recipients"))
		userIdMap.set(userId, userId)
	}
	var userIds = userIdMap.getKeys()
	assert userIds && sizeof userIds > 0:
		callback(Error.instance("invalid_recipient_count", "Cannot have recipient size less than one"))
	insertRecipients(channelId, creatorUserId, DynamicVector.forStringVector(userIds), callback)
}

func insertMessage(message as ChatMessage, newChannelId as string, creatorUserId as string, callback as function<void, Message, Error>) static
{
	assert String.isNotEmpty(newChannelId):
		callback(null, Error.instance("no_channel_id", "No channel id"))
	assert message:
		callback(null, Error.instance("no_message", "No message"))
	var messageText = message.getMessage()
	var attachmentFileName = message.getAttachmentFileName()
	var attachmentURL = message.getAttachmentURL()
	assert String.isNotEmpty(messageText) || String.isNotEmpty(attachmentFileName) || String.isNotEmpty(attachmentURL):
		callback(null, Error.instance("no_message_or_attachment_file_name", "No message or attachment file name"))
	assert String.isNotEmpty(creatorUserId):
		callback(null, Error.instance("no_creator_user_id", "No creator user id"))
	var v = new Message()
	v.setCreatorUserId(creatorUserId)
	v.setChannelId(newChannelId)
	v.setMessage(messageText)
	v.setAttachmentFileName(attachmentFileName)
	v.setAttachmentURL(attachmentURL)
	Message.insert(v, func(error as Error) {
		assert not error:
			callback(null, error)
		callback(v, null)
	})
}

func getMessageById(messageId as string, callback as function<void, Message, Error>) static
{
	Message.getMessageById(messageId, func(message as Message) {
		assert message:
			callback(null, Error.instance("internal_error", "Internal error"))
		callback(message, null)
	})
}

func getChannelForExternalId(externalId as string, callback as function<void, Channel>) static
{
	var db = assert getDb():
		callback(null)
	assert String.isNotEmpty(externalId):
		callback(null)
	db.querySingleRow(db.prepare("SELECT * FROM " .. DataManager.CHAT_CHANNELS .. " WHERE externalId = ?;").addParamString(externalId), func(v as DynamicMap) {
		assert v:
			callback(null)
		callback(Channel.forDynamicMap(v))
	})
}

func onPreInsertChannel(channel as Channel) private static
{
	assert channel
	channel.setTimeStampCreated(SystemClock.asUTCSeconds())
	channel.setTimeStampLastUpdated(channel.getTimeStampCreated())
	channel.setChannelId(generateCode(hashText(channel.getChannelCreatorUserId() .. String.forLongInteger(channel.getTimeStampCreated())), 20))
}

func updateMessage(message as Message, callback as function<void, Message, Error>) static
{
	assert message:
		callback(null, Error.instance("internal_error", "Internal error"))
	Message.updateMessage(message, func(err as Error) {
		assert not err:
			callback(null, err)
		callback(message, null)
	})
}

func deleteMessage(messageId as string, userId as string, callback as function<void, Error>) static
{
	getMessageById(messageId, func(message as Message, error as Error) {
		assert not error:
			callback(error)
		assert message:
			callback(Error.instance("invalid_message_id", "Invalid message id"))
		assert String.equals(message.getCreatorUserId(), userId):
			callback(Error.instance("not_allowed", "Not allowed"))
		assert db.execute(db.prepare("DELETE FROM " .. CHAT_MESSAGES .. " WHERE messageId = ?;").addParamString(messageId)):
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func insertChannelForExternalId(externalId as string, channelCreatorUserId as string, title as string, callback as function<void, Channel, Error>) static
{
	assert String.isNotEmpty(externalId):
		callback(null, Error.instance("no_external_id", "No external id"))
	assert String.isNotEmpty(channelCreatorUserId):
		callback(null, Error.instance("no_channel_creator_user_id", "No channel creator user id"))
	var channel = new Channel()
	channel.setExternalId(externalId)
	channel.setTitle(title)
	channel.setChannelCreatorUserId(channelCreatorUserId)
	onPreInsertChannel(channel)
	Channel.SQL.insert(db, CHAT_CHANNELS, channel, func(success as bool) {
		assert success:
			callback(null, Error.instance("internal_error", "Internal error"))
		callback(channel, null)
	})
}

func insertChannel(channelCreatorUserId as string, title as string, callback as function<void, Channel, Error>) static
{
	assert String.isNotEmpty(channelCreatorUserId):
		callback(null, Error.instance("no_channel_creator_user_id", "No channel creator user id"))
	var channel = new Channel()
	channel.setChannelCreatorUserId(channelCreatorUserId)
	channel.setTitle(title)
	onPreInsertChannel(channel)
	Channel.SQL.insert(db, CHAT_CHANNELS, channel, func(success as bool) {
		assert success:
			callback(null, Error.instance("internal_error", "Internal error"))
		callback(channel, null)
	})
}

func updateChannel(channel as Channel, callback as function<void, Channel, Error>) static
{
	assert channel:
		callback(null, Error.instance("no_channel_instance", "No channel instance"))
	assert String.isNotEmpty(channel.getChannelId()):
		callback(null, Error.instance("no_channel_id", "No channel id"))
	assert String.isNotEmpty(channel.getChannelCreatorUserId()):
		callback(null, Error.instance("no_channel_creator_user_id", "No channel creator user id"))
	channel.setTimeStampLastUpdated(SystemClock.asUTCSeconds())
	Channel.SQL.update(db, CHAT_CHANNELS, channel, func(success as bool) {
		assert success:
			callback(null, Error.instance("internal_error", "Internal error"))
		callback(channel, null)
	})
}

func insertRecipients(channelId as string, channelCreatorUserId as string, recipients as DynamicVector, callback as function<void, Error>) static
{
	assert String.isNotEmpty(channelId):
		callback(Error.instance("no_channel_id", "No channel id"))
	var newRecipients = assert recipients:
		callback(Error.instance("internal_error", "Internal error"))
	var userIdMap = new DynamicMap()
	foreach userId in newRecipients.toVectorOfStrings() {
		assert String.isNotEmpty(userId):
			callback(Error.instance("empty_user_id_found", "Empty user id found in the list of recipients"))
		userIdMap.set(userId, userId)
	}
	var dm = db.querySingleRow(db.prepare("SELECT userId FROM " .. CHAT_RECIPIENTS .. " WHERE channelId = ? AND userId = ?").addParamString(channelId).addParamString(channelCreatorUserId))
	if not dm:
		userIdMap.set(channelCreatorUserId, channelCreatorUserId)
	var count as int
	var cdata = db.querySingleRow(db.prepare("SELECT COUNT(*) as count FROM " .. CHAT_MESSAGES .. " WHERE channelId = ?").addParamString(channelId))
	if cdata:
		count = cdata.getInteger("count")
	var userIds = userIdMap.getKeys()
	assert userIds && sizeof userIds > 0:
		callback(Error.instance("invalid_recipient_count", "Cannot have recipient size less than one"))
	var sb = new StringBuilder()
	sb.append("INSERT INTO " .. CHAT_RECIPIENTS .. " (channelId, userId, timeStampCreated, timeStampLastUpdated, readIndex) VALUES ")
	var first = true
	foreach userId in userIds {
		if not first:
			sb.append(", ")
		first = false
		sb.append("(?, ?, ?, ?, ?)")
	}
	sb.append(";")
	var stmt = assert db.prepare(sb.toString()):
		callback(Error.instance("internal_error", "Internal error"))
	var now = SystemClock.asUTCSeconds()
	foreach userId in userIds {
		stmt.addParamString(channelId)
		stmt.addParamString(userId)
		stmt.addParamLongInteger(now)
		stmt.addParamLongInteger(now)
		stmt.addParamInteger(count)
	}
	db.execute(stmt, func(success as bool) {
		assert success:
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func getUserIdsAssociatedWithUserId(userId as string, callback as function<void, DynamicVector, Error>) static
{
	db.query(db.prepare("SELECT DISTINCT(userId) FROM " .. CHAT_RECIPIENTS .. " WHERE NOT userId = ? AND channelId IN (SELECT channelId FROM " .. CHAT_RECIPIENTS .. " WHERE userId = ?);").addParamString(userId).addParamString(userId), func(itr as SQLResultSetIterator) {
		assert itr:
			callback(null, Error.instance("internal_error", "Internal error"))
		var list = new DynamicVector()
		loop {
			var v = itr.next()
			if not v:
				break
			list.append(v.getString("userId"))
		}
		callback(list, null)
	})
}
