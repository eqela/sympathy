
/*
 * This file is part of Sympathy
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018 Eqela Oy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import jk.sql

class #dataModel:

prop messageId as string #dataField #primary
prop channelId as string #dataField #index
prop creatorUserId as string #dataField #index
prop message as string #dataField #text
prop timeStampCreated as long #dataField #index
prop timeStampLastUpdated as long #dataField #index
prop messageIndex as long #dataField #index
prop attachmentFileName as string #dataField #index
prop attachmentURL as string #dataField #index
prop attachment as buffer #dataField
prop attachmentMimetype as string #dataField

func insert(message as this, callback as function<void, Error>) static
{
	assert message:
		callback(Error.instance("no_message", "No message"))
	var channelId = message.getChannelId()
	assert String.isNotEmpty(channelId):
		callback(Error.instance("no_channel_id", "No channel id"))
	var now = SystemClock.asUTCSeconds()
	message.setTimeStampCreated(now)
	message.setTimeStampLastUpdated(now)
	message.setMessageId(DataManager.generateCode(DataManager.hashText(channelId .. message.getCreatorUserId() .. message.getMessage() .. String.forLongInteger(now)), 20))
	message.setMessageIndex(getMessageCount(channelId))
	var db = assert DataManager.getDb():
		callback(Error.instance("no_database", "No database configured"))
	SQL.insert(db, DataManager.CHAT_MESSAGES, message, func(success as bool) {
		assert success:
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func updateMessage(message as this, callback as function<void, Error>) static
{
	assert message:
		callback(Error.instance("no_message", "No message"))
	message.setTimeStampLastUpdated(SystemClock.asUTCSeconds())
	var db = assert DataManager.getDb():
		callback(Error.instance("no_database", "No database configured"))
	SQL.update(db, DataManager.CHAT_MESSAGES, message, func(success as bool) {
		assert success:
			callback(Error.instance("internal_error", "Internal error"))
		callback(null)
	})
}

func getMessageById(messageId as string, callback as function<void, this>) static
{
	var db = assert DataManager.getDb():
		callback(null)
	SQL.queryByMessageId(db, DataManager.CHAT_MESSAGES, messageId, callback)
}

func getMessageCount(channelId as string) static as long
{
	var db = assert DataManager.getDb()
	var v = assert db.querySingleRow(db.prepare("SELECT COUNT(*) AS size FROM " .. DataManager.CHAT_MESSAGES .. " WHERE channelId = ?;").addParamString(channelId))
	return v.getLongInteger("size")
}

func getRecentMessages(channelId as string, page as int, limit as int) static as DynamicVector
{
	var offset = page - 1
	if offset < 0:
		offset = 0
	var db = assert DataManager.getDb():
		return new DynamicVector()
	var itr = assert db.query(db.prepare(createQueryString(false)).addParamString(channelId).addParamInteger(limit).addParamInteger(offset * limit)):
		return new DynamicVector()
	var dvector = assert itr.toVectorOfMaps():
		return new DynamicVector()
	return dvector
}

func getMessages(channelId as string, page as int, limit as int, callback as function<void, DynamicVector, int, int>) static
{
	if limit <= 0:
		limit = 20
	var offset = page - 1
	if offset < 0:
		offset = 0
	var db = assert DataManager.getDb():
		callback(new DynamicVector(), 0, 0)
	db.query(db.prepare(createQueryString(false)).addParamString(channelId).addParamInteger(limit).addParamInteger(offset * limit), func(itr as SQLResultSetIterator) {
		assert itr:
			callback(new DynamicVector(), 0, 0)
		var data = assert db.query(db.prepare(createQueryString(true)).addParamString(channelId)):
			callback(new DynamicVector(), 0, 0)
		var dvector = assert data.toVectorOfMaps():
			callback(new DynamicVector(), 0, 0)
		var count = dvector.getSize()
		var pageCount = count / limit
		if (count % limit) > 0:
			pageCount++
		callback(itr.toVectorOfMaps(), pageCount, count)
	})
}

func createQueryString(isForCount as bool) private static as string
{
	var sb = new StringBuilder()
	sb.append("SELECT messageId, channelId, creatorUserId, message, timeStampCreated, timeStampLastUpdated, messageIndex, attachmentFileName, attachmentURL FROM " .. DataManager.CHAT_MESSAGES .. " WHERE channelId = ?")
	if not isForCount:
		sb.append(" ORDER BY timeStampCreated DESC LIMIT ? OFFSET ?")
	sb.append(";")
	return sb.toString()
}

func getRecentMessage(channelId as string) static as DynamicMap
{
	var db = assert DataManager.getDb()
	return db.querySingleRow(db.prepare("SELECT messageId, channelId, creatorUserId, message, timeStampCreated, timeStampLastUpdated, messageIndex, attachmentFileName, attachmentURL FROM " .. DataManager.CHAT_MESSAGES .. " WHERE channelId = ? ORDER BY timeStampCreated DESC LIMIT 1;").addParamString(channelId))
}
